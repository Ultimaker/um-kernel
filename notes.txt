Confirmed to work
- Reset
- Ethernet
- MMC SD
- uart2 (default console SOM)
- USB ports, not working
- I2C 0-3 (1-4)
- CAN ??
- PCIe ??
- I2S audio ??
- USB cdc_acm ttyACMO


############################ Serial ports ############################

root@ultimakersystem-0013953a4811:~# dmesg | grep tty
[    1.081107] 30860000.serial: ttymxc0 at MMIO 0x30860000 (irq = 28, base_baud = 5000000) is a IMX
[    1.090021] 30880000.serial: ttymxc2 at MMIO 0x30880000 (irq = 29, base_baud = 5000000) is a IMX
[    1.098547] 30890000.serial: ttymxc1 at MMIO 0x30890000 (irq = 30, base_baud = 1500000) is a IMX
[    1.109615] console [ttymxc1] enabled
[    1.123586] 30a60000.serial: ttymxc3 at MMIO 0x30a60000 (irq = 35, base_baud = 5000000) is a IMX
[   27.117412] cdc_acm 1-1:1.0: ttyACM0: USB ACM device

uart1: serial@30860000 SER2/M2      - alias serial0 - ttymxc0
uart2: serial@30890000 console/SER3 - alias serial1 - ttymxc1
uart3: serial@30880000 SER0         - alias serial2 - ttymxc2
uart4: serial@30a60000 SER1         - alias serial3 - ttymxc3



errors:

imx-uart 30880000.serial: We cannot prepare for the TX slave dma
imx-sdma 30bd0000.dma-controller: sdma firmware not ready!

I want to use ttymxc2 for console, how to configure without rtsc, can i just delete the dma properties?

imx/sdma/sdma-imx7d.bin

add to apt/sources.list
deb http://deb.debian.org/debian buster main contrib non-free
apt install firmware-linux
CONFIG_IMX_SDMA=m



##### UBoot environment ###################

baudrate=115200
boot_fdt=try
bootargs=console=ttymxc1,115200 earlycon=ec_imx6q,0x30890000,115200 root=/dev/nfs ip=dhcp nfsroot=10.183.2.167:/srv/aarch64_fs,v3,tcp cma=480M@1024M-2560M drm.debug=0x1ff
bootcmd=run netboot
bootdelay=4
bootdevice=mmc
bootfile=ultimain5.0-imx8mm-cgtsx8m-lvds-1024x768.dtb
bootscript=echo Running bootscript from mmc ...; source
cma_settings=480M@1024M-2560M
console=ttymxc2,115200 earlycon=ec_imx6q,0x30880000,115200
dnsip=192.168.2.255
ethact=ethernet@30be0000
ethaddr=00:13:95:3a:48:11
ethprime=FEC
fdt_addr=0x43000000
fdt_file=ultimain5.0-imx8mm-cgtsx8m-lvds-1024x768.dtb
fdt_high=0xffffffffffffffff
fdtcontroladdr=be8f5f00
fileaddr=40480000
filesize=a57c
gatewayip=192.168.2.255
get_cmd=dhcp
image=uImage-sx8m
initrd_addr=0x43800000
initrd_high=0xffffffffffffffff
ipaddr=192.168.2.150
loadaddr=0x40480000
loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};
loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}
loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}
loadusbfdt=fatload usb ${usbdev}:${usbpart} ${fdt_addr} ${fdt_file}
loadusbimage=fatload usb ${usbdev}:${usbpart} ${loadaddr} ${image}
mmcargs=setenv bootargs ${jh_clk} console=${console} root=${mmcroot} cma=${cma_settings}
mmcautodetect=yes
mmcboot=echo Booting from mmc ...; run mmcargs; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then if run loadfdt; then booti ${loadaddr} - ${fdt_addr}; else echo WARN: Cannot load the DT; fi; els;
mmcdev=0
mmcpart=1
mmcroot=/dev/mmcblk1p2 rootwait rw
netargs=setenv bootargs ${jh_clk} console=${console} root=/dev/nfs ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp cma=${cma_settings} drm.debug=0x1ff
netboot=echo Booting from net ...; run netargs;  if test ${ip_dyn} = yes; then setenv get_cmd dhcp; else setenv get_cmd tftp; fi; ${get_cmd} ${loadaddr} ${image}; if test ${boot_fdt} = yes || test ${boot;
netmask=255.255.255.0
nfsroot=/srv/aarch64_fs
script=boot.scr
serverip=192.168.2.3
soc_type=imx8mm
usbargs=setenv bootargs console=${console} root=${usbroot} cma=${cma_settings}
usbdev=0
usbpart=1
usbroot=/dev/sda2 rootwait rw
video_output_type=LVDS

Environment size: 2417/4092 bytes
u-boot=> setenv console 'console=ttymxc1,115200 earlycon=ec_imx6q,0x30890000,115200'
u-boot=> printenv console
console=console=ttymxc1,115200 earlycon=ec_imx6q,0x30890000,115200



# Boudewijn #################

How are we supposed to software control the imxrt reset?

RESET_IN#
The RESET_IN# signal (pin P127) is an active-low input signal from the carrier board. The signal may be used to force the module to reset or
reboot. The booting process can be postponed by driving RESET_IN# low during power on sequence.
RESET_OUT#
The RESET_OUT# signal (pin P126) is an active-low output signal from the module. The module asserts this signal during the power-up
sequencing to allow the carrier board power circuits to come up. The module deasserts this signal to begin the boot-up process
