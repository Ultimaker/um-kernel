From b56a811dc062397128572f094f9c92453d5102ab Mon Sep 17 00:00:00 2001
From: Raymond Siudak <r.siudak@ultimaker.com>
Date: Thu, 10 Dec 2020 20:48:00 +0100
Subject: [PATCH 2/4] Add polled touch as an option

We do not have spare interrupt wires in the cable, therefore we need
polling.

Signed-off-by: Raymond Siudak <r.siudak@ultimaker.com>
---
 .../bindings/input/touchscreen/edt-ft5x06.txt |  18 +-
 drivers/input/touchscreen/edt-ft5x06.c        | 197 ++++++++++++++----
 2 files changed, 173 insertions(+), 42 deletions(-)

diff --git a/Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt b/Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt
index d047c6d0967c..41c8966c3017 100644
--- a/Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt
+++ b/Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt
@@ -99,7 +99,7 @@ additionalProperties: false
 required:
   - compatible
   - reg
-  - interrupts
+  - interrupts or poll-interval
 
 examples:
   - |
@@ -118,4 +118,20 @@ examples:
       };
     };
 
+examples:
+  - |
+    #include <dt-bindings/gpio/gpio.h>
+    #include <dt-bindings/interrupt-controller/arm-gic.h>
+    i2c {
+      #address-cells = <1>;
+      #size-cells = <0>;
+      edt-ft5x06@38 {
+        compatible = "edt,edt-ft5406";
+        reg = <0x38>;
+        poll-interval = <10>;
+        reset-gpios = <&gpio2 6 GPIO_ACTIVE_LOW>;
+        wake-gpios = <&gpio4 9 GPIO_ACTIVE_HIGH>;
+      };
+    };
+
 ...
\ No newline at end of file
diff --git a/drivers/input/touchscreen/edt-ft5x06.c b/drivers/input/touchscreen/edt-ft5x06.c
index ff1d3675f17a..d2a7fd4fd41c 100644
--- a/drivers/input/touchscreen/edt-ft5x06.c
+++ b/drivers/input/touchscreen/edt-ft5x06.c
@@ -20,10 +20,12 @@
 #include <linux/interrupt.h>
 #include <linux/input.h>
 #include <linux/input/mt.h>
+#include <linux/input-polldev.h>
 #include <linux/input/touchscreen.h>
 #include <linux/irq.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/of_device.h>
 #include <linux/ratelimit.h>
 #include <linux/regulator/consumer.h>
 #include <linux/slab.h>
@@ -47,6 +49,13 @@
 #define M09_REGISTER_NUM_X		0x94
 #define M09_REGISTER_NUM_Y		0x95
 
+#define M09_ID_G_MODE		0xa4
+#define M09_ID_G_MODE_POLL	0x00
+#define M09_ID_G_MODE_IRQ	0x01
+
+#define M09_ID_G_PMODE				0xa5
+#define M09_ID_G_PMODE_ACTIVE		0x00
+
 #define EV_REGISTER_THRESHOLD		0x40
 #define EV_REGISTER_GAIN		0x41
 #define EV_REGISTER_OFFSET_Y		0x45
@@ -83,6 +92,11 @@ enum edt_ver {
     GENERIC_FT,
 };
 
+enum readout_mode {
+    EDT_READOUT_MODE_POLL,
+    EDT_READOUT_MODE_IRQ,
+};
+
 struct edt_reg_addr {
     int reg_threshold;
     int reg_report_rate;
@@ -97,6 +111,9 @@ struct edt_reg_addr {
 struct edt_ft5x06_ts_data {
     struct i2c_client *client;
     struct input_dev *input;
+#if IS_ENABLED(CONFIG_INPUT_POLLDEV)
+    struct input_polled_dev *polldev;
+#endif
     struct touchscreen_properties prop;
     u16 num_x;
     u16 num_y;
@@ -183,9 +200,8 @@ static bool edt_ft5x06_ts_check_crc(struct edt_ft5x06_ts_data *tsdata,
     return true;
 }
 
-static irqreturn_t edt_ft5x06_ts_isr(int irq, void *dev_id)
+static void edt_ft5x06_report(struct edt_ft5x06_ts_data *tsdata)
 {
-    struct edt_ft5x06_ts_data *tsdata = dev_id;
     struct device *dev = &tsdata->client->dev;
     u8 cmd;
     u8 rdbuf[63];
@@ -212,19 +228,16 @@ static irqreturn_t edt_ft5x06_ts_isr(int irq, void *dev_id)
         break;
 
     default:
-        goto out;
+        return;
     }
 
     memset(rdbuf, 0, sizeof(rdbuf));
     datalen = tplen * tsdata->max_support_points + offset + crclen;
-
-    error = edt_ft5x06_ts_readwrite(tsdata->client,
-                                    sizeof(cmd), &cmd,
-                                    datalen, rdbuf);
+    error = edt_ft5x06_ts_readwrite(tsdata->client, sizeof(cmd), &cmd, datalen, rdbuf);
     if (error) {
         dev_err_ratelimited(dev, "Unable to fetch data, error: %d\n",
                             error);
-        goto out;
+        return;
     }
 
     /* M09/M12 does not send header or CRC */
@@ -234,11 +247,11 @@ static irqreturn_t edt_ft5x06_ts_isr(int irq, void *dev_id)
             dev_err_ratelimited(dev,
                                 "Unexpected header: %02x%02x%02x!\n",
                                 rdbuf[0], rdbuf[1], rdbuf[2]);
-            goto out;
+            return;
         }
 
         if (!edt_ft5x06_ts_check_crc(tsdata, rdbuf, datalen))
-            goto out;
+            return;
     }
 
     for (i = 0; i < tsdata->max_support_points; i++) {
@@ -262,16 +275,20 @@ static irqreturn_t edt_ft5x06_ts_isr(int irq, void *dev_id)
         id = (buf[2] >> 4) & 0x0f;
 
         input_mt_slot(tsdata->input, id);
-        if (input_mt_report_slot_state(tsdata->input, MT_TOOL_FINGER,
-                                       type != TOUCH_EVENT_UP))
-            touchscreen_report_pos(tsdata->input, &tsdata->prop,
-                                   x, y, true);
+        input_mt_report_slot_state(tsdata->input, MT_TOOL_FINGER, type != TOUCH_EVENT_UP);
+        touchscreen_report_pos(tsdata->input, &tsdata->prop, x, y, true);
     }
 
     input_mt_report_pointer_emulation(tsdata->input, true);
     input_sync(tsdata->input);
+}
+
+static irqreturn_t edt_ft5x06_ts_isr(int irq, void *dev_id)
+{
+    struct edt_ft5x06_ts_data *tsdata = dev_id;
+
+    edt_ft5x06_report(tsdata);
 
-    out:
     return IRQ_HANDLED;
 }
 
@@ -348,6 +365,26 @@ static int edt_ft5x06_register_read(struct edt_ft5x06_ts_data *tsdata,
     return rdbuf[0];
 }
 
+static void edt_ft5x06_poll(struct input_polled_dev *polldev)
+{
+    struct edt_ft5x06_ts_data *tsdata = polldev->private;
+
+    /* Ensure display is always awake */
+    switch (tsdata->version) {
+    case EDT_M06:
+        break;
+    case EDT_M09: /* fall through */
+    case EDT_M12: /* fall through */
+    case EV_FT:
+    case GENERIC_FT:
+        edt_ft5x06_register_write(tsdata, M09_ID_G_PMODE,
+                                  M09_ID_G_PMODE_ACTIVE);
+        break;
+    }
+
+    edt_ft5x06_report(tsdata);
+}
+
 struct edt_ft5x06_attribute {
     struct device_attribute dattr;
     size_t field_offset;
@@ -815,6 +852,22 @@ static void edt_ft5x06_ts_teardown_debugfs(struct edt_ft5x06_ts_data *tsdata)
 
 #endif /* CONFIG_DEBUGFS */
 
+static int edt_ft5x06_open(struct input_dev *dev)
+{
+    struct edt_ft5x06_ts_data *tsdata = input_get_drvdata(dev);
+
+    enable_irq(tsdata->client->irq);
+
+    return 0;
+}
+
+static void edt_ft5x06_close(struct input_dev *dev)
+{
+    struct edt_ft5x06_ts_data *tsdata = input_get_drvdata(dev);
+
+    disable_irq(tsdata->client->irq);
+}
+
 static int edt_ft5x06_ts_identify(struct i2c_client *client,
                                   struct edt_ft5x06_ts_data *tsdata,
                                   char *fw_version)
@@ -1010,6 +1063,26 @@ edt_ft5x06_ts_get_parameters(struct edt_ft5x06_ts_data *tsdata)
     }
 }
 
+static void edt_ft5x06_ts_set_readout_mode(struct edt_ft5x06_ts_data *tsdata,
+                                           enum readout_mode mode)
+{
+    uint8_t readout_mode;
+
+    switch (tsdata->version) {
+    case EDT_M06:
+        break;
+    case EDT_M09: /* fall through */
+    case EDT_M12: /* fall through */
+    case EV_FT:
+    case GENERIC_FT:
+        readout_mode = (mode == EDT_READOUT_MODE_POLL) ?
+                       M09_ID_G_MODE_POLL :
+                       M09_ID_G_MODE_IRQ;
+        edt_ft5x06_register_write(tsdata, M09_ID_G_MODE, readout_mode);
+        break;
+    }
+}
+
 static void
 edt_ft5x06_ts_set_regs(struct edt_ft5x06_ts_data *tsdata)
 {
@@ -1074,8 +1147,8 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
     const struct edt_i2c_chip_data *chip_data;
     struct edt_ft5x06_ts_data *tsdata;
     u8 buf[2] = { 0xfc, 0x00 };
+
     struct input_dev *input;
-    unsigned long irq_flags;
     int error;
     char fw_version[EDT_NAME_LEN];
 
@@ -1087,7 +1160,7 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
         return -ENOMEM;
     }
 
-    chip_data = device_get_match_data(&client->dev);
+    chip_data = of_device_get_match_data(&client->dev);
     if (!chip_data)
         chip_data = (const struct edt_i2c_chip_data *)id->driver_data;
     if (!chip_data || !chip_data->max_support_points) {
@@ -1137,7 +1210,7 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
     }
 
     /*
-     * Check which sleep modes we can support. Power-off requieres the
+     * Check which sleep modes we can support. Power-off requires the
      * reset-pin to ensure correct power-down/power-up behaviour. Start with
      * the EDT_PMODE_POWEROFF test since this is the deepest possible sleep
      * mode.
@@ -1160,15 +1233,8 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
         msleep(300);
     }
 
-    input = devm_input_allocate_device(&client->dev);
-    if (!input) {
-        dev_err(&client->dev, "failed to allocate input device.\n");
-        return -ENOMEM;
-    }
-
     mutex_init(&tsdata->mutex);
     tsdata->client = client;
-    tsdata->input = input;
     tsdata->factory_mode = false;
 
     error = edt_ft5x06_ts_identify(client, tsdata, fw_version);
@@ -1191,6 +1257,68 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
             "Model \"%s\", Rev. \"%s\", %dx%d sensors\n",
             tsdata->name, fw_version, tsdata->num_x, tsdata->num_y);
 
+// Switch between polled device or IRQ
+
+    if (client->irq) {
+        unsigned long irq_flags;
+
+        irq_flags = irq_get_trigger_type(client->irq);
+        if (irq_flags == IRQF_TRIGGER_NONE)
+            irq_flags = IRQF_TRIGGER_FALLING;
+        irq_flags |= IRQF_ONESHOT;
+
+        error = devm_request_threaded_irq(&client->dev, client->irq,
+                                          NULL, edt_ft5x06_ts_isr, irq_flags,
+                                          client->name, tsdata);
+        if (error) {
+            dev_err(&client->dev, "Unable to request touchscreen IRQ.\n");
+            return error;
+        }
+
+        disable_irq(client->irq);
+
+        input = devm_input_allocate_device(&client->dev);
+        if (!input) {
+            dev_err(&client->dev, "failed to allocate input device.\n");
+            return -ENOMEM;
+        }
+        input->open = edt_ft5x06_open;
+        input->close = edt_ft5x06_close;
+
+        edt_ft5x06_ts_set_readout_mode(tsdata, EDT_READOUT_MODE_IRQ);
+
+        error = input_register_device(input);
+    }
+#if !IS_ENABLED(CONFIG_INPUT_POLLDEV)
+        dev_err(&client->dev, "no IRQ setup and built without INPUT_POLLDEV\n");
+		return -ENODEV;
+#else
+    else {
+        uint32_t poll_interval;
+
+        dev_warn(&client->dev, "no IRQ setup, using polled input\n");
+
+        tsdata->polldev = devm_input_allocate_polled_device(&client->dev);
+        if (!tsdata->polldev) {
+            dev_err(&client->dev, "failed to allocate polldev\n");
+            return -ENOMEM;
+        }
+
+        if (!device_property_read_u32(&client->dev, "poll-interval", &poll_interval))
+            tsdata->polldev->poll_interval = poll_interval;
+
+        tsdata->polldev->private = tsdata;
+        tsdata->polldev->poll = edt_ft5x06_poll;
+        input = tsdata->polldev->input;
+
+        edt_ft5x06_ts_set_readout_mode(tsdata, EDT_READOUT_MODE_POLL);
+
+        error = input_register_polled_device(tsdata->polldev);
+        if (error)
+            dev_err(&client->dev, "Unable to register polled device.\n");
+    }
+#endif
+
     input->name = tsdata->name;
     input->id.bustype = BUS_I2C;
     input->dev.parent = &client->dev;
@@ -1221,24 +1349,12 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
 
     i2c_set_clientdata(client, tsdata);
 
-    irq_flags = irq_get_trigger_type(client->irq);
-    if (irq_flags == IRQF_TRIGGER_NONE)
-        irq_flags = IRQF_TRIGGER_FALLING;
-    irq_flags |= IRQF_ONESHOT;
-
-    error = devm_request_threaded_irq(&client->dev, client->irq,
-                                      NULL, edt_ft5x06_ts_isr, irq_flags,
-                                      client->name, tsdata);
-    if (error) {
-        dev_err(&client->dev, "Unable to request touchscreen IRQ.\n");
-        return error;
-    }
+    tsdata->input = input;
 
-    error = devm_device_add_group(&client->dev, &edt_ft5x06_attr_group);
     if (error)
         return error;
 
-    error = input_register_device(input);
+    error = devm_device_add_group(&client->dev, &edt_ft5x06_attr_group);
     if (error)
         return error;
 
@@ -1395,9 +1511,8 @@ MODULE_DEVICE_TABLE(of, edt_ft5x06_of_match);
 static struct i2c_driver edt_ft5x06_ts_driver = {
         .driver = {
                 .name = "edt_ft5x06",
-                .of_match_table = edt_ft5x06_of_match,
+                .of_match_table = of_match_ptr(edt_ft5x06_of_match),
                 .pm = &edt_ft5x06_ts_pm_ops,
-                .probe_type = PROBE_PREFER_ASYNCHRONOUS,
         },
         .id_table = edt_ft5x06_ts_id,
         .probe    = edt_ft5x06_ts_probe,
-- 
2.25.1

