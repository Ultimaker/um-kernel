# yamllint disable rule:line-length
# SPDX-License-Identifier: AGPL-3.0+
#
# Copyright (C) 2019 Ultimaker B.V.
#
# GitLab CI package build is split up into two parts.
# * Build environment: creates the docker image that is needed for package generation
# * Package generation: creates the final artifact

---
stages:
  - lint
  - prepare
  - push
  - build
  - cleanup

# Common parameters to be included in every job
# =============================================
.jobs_common: &jobs_common
  tags:
    - docker

# Common parameters used in all environment related jobs
# ======================================================
.environment_common: &environment_common
  <<: *jobs_common
  image: registry.hub.docker.com/library/docker:stable
  before_script:
    - apk update && apk add git

# The following can be included in the 'only', or 'except' statements,
# so they look for changes in files related to Docker and thus our environment.
.environment_common_docker_changes: &environment_common_docker_changes
  changes:
    - Dockerfile
    - .dockerignore
    - dockerfiles/**/*

# Lint stage
# =============
.lint_scripts_common: &lint_scripts_common
  <<: *jobs_common
  image: registry.hub.docker.com/koalaman/shellcheck-alpine:stable
  stage: lint

lint_scripts_build:
  <<: *lint_scripts_common
  script:
    - shellcheck -C -f tty "build"*".sh"

lint_scripts_test:
  <<: *lint_scripts_common
  script:
    - find 'test/' -iname '*.sh' -exec shellcheck -x -C -f tty {} \;

# Prepare stage
# =============
prepare_environment:
  <<: *environment_common
  stage: prepare
  script:
    - ci/prepare_environment.sh

# Push stage
# ==========
push_environment:
  <<: *environment_common
  only:
    <<: *environment_common_docker_changes
    refs:
      - master
  stage: push
  script:
    - ci/push_environment.sh

# Build stage
# ===========
.build_common: &build_common
  <<: *jobs_common
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 1
  script:
    - ./build.sh
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA"
    paths:
      - ./*.deb
    expire_in: 3 days

# Build the package on a non-master branch in a modified Docker image.
build_branch:
  <<: *build_common
  except:
    refs:
      - master
  image: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"

# Build the package on the master branch in the latest Docker image.
build_master:
  <<: *build_common
  only:
    refs:
      - master
  image: "${CI_REGISTRY_IMAGE}:latest"

# Cleanup stage
# =============
cleanup_environment:
  <<: *environment_common
  stage: cleanup
  except:
    refs:
      - master
  when: always
  script:
    - ci/cleanup_environment.sh
