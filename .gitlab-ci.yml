# yamllint disable rule:line-length
# SPDX-License-Identifier: AGPL-3.0+
#
# Copyright (C) 2018 Ultimaker B.V.
# Copyright (C) 2018 Olliver Schinagl <oliver@schinagl.nl>
#
# GitLab CI package build is split up into two parts.
# * Build environment: creates the docker image that is needed for package generation
# * Package generation: creates the final artifact

---
stages:
  - lint
  - prepare
  - push
  - build
  - test
  - cleanup

# Common requisites
# ==========
.parameters_template: &parameters_common
  tags:
    - docker

.changes_docker: &changes_docker
  changes:
    - Dockerfile
    - .dockerignore
    - dockerfiles/**/*

.shell_linting_common: &shell_linting_common
  <<: *parameters_common
  image: registry.hub.docker.com/koalaman/shellcheck-alpine:stable
  stage: lint

lint_build_scripts:
  <<: *shell_linting_common
  script:
    - shellcheck -C -f tty "build"*".sh"

lint_test_scripts:
  <<: *shell_linting_common
  script:
    - find 'test/' -iname '*.sh' -exec shellcheck -x -C -f tty {} \;

# Build environment
# =================
.build_environment_common: &environment_common
  <<: *parameters_common
  image: registry.hub.docker.com/library/docker:stable

prepare_build_environment:
  <<: *environment_common
  # only:
  #   <<: *changes_docker
  stage: prepare
  script:
    - docker build --rm -t "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}" .
    - |
        docker run \
        --rm \
        --privileged \
        -e "ARM_EMU_BIN=${ARM_EMU_BIN}" \
        -v "${ARM_EMU_BIN}:${ARM_EMU_BIN}:ro" \
        "$CI_COMMIT_SHA:$CI_PIPELINE_ID" \
        /test/buildenv_check.sh

# The push to the Docker registry is thus only executed when docker changes are
# performed and the working branch is 'master'
push_build_environment:
  <<: *environment_common
  only:
    <<: *changes_docker
    refs:
      - master
  stage: push
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker tag  "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    - docker tag  "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}" "${CI_REGISTRY_IMAGE}:latest"
    - docker push "${CI_REGISTRY_IMAGE}:latest"

cleanup_build_environment:
  <<: *environment_common
  only:
    <<: *changes_docker
  stage: cleanup
  when: always
  script:
    - |
      if docker inspect --type image "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}" 1> /dev/null; then
        docker rmi "${CI_COMMIT_SHA}:${CI_PIPELINE_ID}"
      fi

# Package generation
# ==================
build_pkg_common: &build_pkg_common
  <<: *parameters_common
  stage: build
  script:
    - ./build.sh
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA"
    paths:
      - ./*.deb
    expire_in: 3 days
